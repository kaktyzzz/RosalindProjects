# Peptide Encoding Problem: Find substrings of a genome encoding a given amino acid sequence.
#      Input: A DNA string Text, an amino acid string Peptide, and the array GeneticCode.
#      Output: All substrings of Text encoding Peptide (if any such substrings exist).
#
# CODE CHALLENGE: Solve the Peptide Encoding Problem.
#
# Sample Input:
#      ATGGCCATGGCCCCCAGAACTGAGATCAATAGTACCCGTATTAACGGGTGA
#      MA
#
# Sample Output:
#      ATGGCC
#      GGCCAT
#      ATGGCC



from main.src.HelperFunctions.InOutHelper import *
from main.src.HelperFunctions.BioHelper import *


# fileName = 'rosalind_prot'
# fIn = open(getFullPathInput(fileName), 'r')
# fOut = open(getFullPathOutput(fileName), 'w')


dna = 'GGTTATAGGACGCGATGACCTAACACTGTAGGGCTGCCAGCATGTTACCACGAAATCAATCCACCCGCACCCAGGGTCTAGATCTTACTGACCCGGTATCGTAGCCTGGTTTCGGGCGATAGTGCTTACGCGCTCGGCGCCTCATGGCACGCCCCTCCCATCCGGGAAGAGGGCACTGGCAATTTTGGTGATACAGAAACTCCTGACGAGTCGGCTGAATTGCTTCCGAGAACAGCGTAAATGCTCGTGCGGTGTTCCTTCCTCGAAAGTGTGCTAAAATAATCTACTGTTGCACGGGGGCCTTGCGTTTCATCGATCTGAGCCGGGGCCGTGCGAATACACCAGGTCCTGATACCGAGACAGAATCGGGCATAGTGACAGTGTATAAAAGGTGCCCGCACTAACCGAATGCGATTCCTATGGACGATAAAGTTGCAGGCAATGTATCACTGTGGGAGTCGCATTACCAAAGACAGTGAACCAATAAGAGCTCCTATAGCTAGACTAGGAAGGGTAGTACCTTAACGTGCATAGGATATATAGCGATACCGTCCCGTTATCGACGATGCAGAGATTTAATCAATTCTACAGAAGGCTAGCACTATGCATTGTCGTCCCCGATGACGCATGACCGGATTCTACAAACACAGAGTATCCAACACAATGTTCTGCGGGTTCTTTGATTGACGAACTGTCAGCGTATCGGTCGCGAATTGGAGGTTCTGCGACCCACTCTCTGAGCCGCCGTTTTGGGACGACGATCGAATGGGGCCATGTGGCATCTCTGCCGGGGACAGGGTATGACACCAGCTAGGGATGAAAGAGCCGGCCGAGCACTGCGTTGGTTACTACAACGAGCGAGCCGAGATGCGAGATCACGCCATCTGCCCTGTCTCCTTTGAACCAGATCGAGTCAAATGACGTCATCCCCCATGGACCACCACAATCCTGTTTTAATTCCTCGACGATTAAGCTAACTACCGCCAGCTCGAGTCTGCCGGCTCAACCCCAAAAACCTCGATATAATTGTGTAGGAGCTAAAATCGCCCGCAGTGTCGAAGCCTTAATGTGGTCCATAGTAGCTGCAAGGCCCAAGTATCGAATTCGCCCCCGTCCAGTCATCAAACTGATGTTTATCATATTTGCACTTCTGGTCCTCGGTAGCACTCTTCGAGTGTGGGGCAGACGAAAATCAAGATGCCCGTATTAGTGTACCCGCCGCTACTCCACAAAGACAACGTATCAGAGCGCACTTCTATTTAGCCTTGTGGTGCCTCGATAATATAACCTATTTTCGAACAGTCCTAATACAGCGCAGACATAAAACCAGACTTAGCGGTAGTTCATGAAAAGAATCCCGCCAAAGAACCGGCGGAACATTGCGTCGGTTATCGGCCCGCTGTCGGTATTGGGAGTACCCGACACAGTGTTCTGCTGGCTCTTTTGCTCTCGACCCGATCCTTTTGGTACGCATTGCAACGGTAGATCACTAAAGACCGGCCGAGTCGTAAGCTCGTTACGGTTGCATTCTTTCTCATAGTGGTACCGGATAATAAATACGAACACGACACAGGGAAGGGGCTTTGGTGGCCCAAGGAGCACTATACTGGGTAACTTTCACGGTACCCAAGTTCCGCGAGTCGGACCGTACTCAGTGGCTCTCGCGGAAAGGTCGCGTAAGTATCCCATGCTGTTGGACTCATCTTGGGTGAGTTCAGACTATCTCTACCGCAACTGTCGACTGCCAATAAGAATTCTGTACCTAGCGTATATTTGATCCGTGGATTGGTCCCAATTGTGGCTCACGCAACGAATTCGCTGGGAGAAGATCTAGCCCAATTACATGAAAGAAAGCAACGGGTAGTATGTGCAAGGAGCCAGCCGAACATTGCGTTGGTTATGTCTCGGGGTTTAGTAGGTCCCAATAGGGGGACACACTGGACACCGAAATAATCGCAATGTGGAGGACTAAGCATGCCCGGATTTGATGAGTGTCCAGGCCTTAAGCGTTAATCCGTGGCCACGATGGAACGAATCCGCTATGAGTTCCCAACACCAGGCGGACTGTGGTCTGCCGCGTCAGTGTCGCCTCAGTGAGCGCGTGCTTTCACATGTACTAATGTCATGTAAGGGTCCCCCTCCATGTACATTTATCCACAGCGGCATGTCCGATTCGTTCTCCGAGTGGTTTCGCGATCTCGATGTATCGTCTTGCCCGATCACTCCGCCAGTCAACGTTGTGGATCCGTGACCAGAATACGCACAGATTTGTGGTGCATTCGGTAAGGAGTTGAGGTAGGAATGGTTTAATATCACCAGCTTCTTCTTGCGCGTCGTTATGGCAGCCAATCGCGCCAGTCGGCGGTTAATGTATCACGTGGAATTGCCGAATCATGACGGAAAGTATTCACAGGCGAAGACGGGATCTCCTCATGCCCCGGATATACTCGGTGTCCTCCGAGGCTGTGCGCTGTACCACGGCCGACTGGATACTGGCCTCAGGCACCGGCCCGACCCCGGTGTGGGAGCGCTAAGTGCCCGGGAATGACTAATGGAGATGTACGTTCCCCTAGCTCTGACACAGCGACTACAGGGAATAGCTCAGGTTACTGATTGTGTTGCTGTAGATCGACCTCCTAACCGCTTGAGGCCGCTTAGACCCTTTCCAAGGCTGCATCGGACGAACTACAGACAATGCTGGGGCGCGCTCATTGTAAGGTTCGCCTTTTTTTATAGCAAAGTCTTCCTTAGATAAACATGGTGACAGCAACATTGACTTTTGCCCTATGAAACTACTAATAACCTGGTTATCTTTATTCTACTCTCACACAAGTACAACCCTGCGGCCTACGCCAACAACCAATTTAGTTCGATCGTGGTTGCGGAGAGCGCCCCCACGGGAGTCCGGACACCTCCACGCCTTCAGTTTCGATGGAAACATTGTTGTTATCATTGACTTTCAAAGAGCCTGCGGAACATTGTGTTGGCTATCGCATCGAACTGCAGATCGTTTAGCACGACCTGAGCGAGCGATTCGGGTGAACAGATTTACCGCTCTACACTACGGTATATCCTACACAATGCTCAGCGGGTTCTTTTGGCCAGCGAACATGATACCAACGGTAACCGGCCCCGTTAAAATTCATAGCCGAGTCGCGGATATCGCAGTGTAAAGTGCATACGTCTTACTCTCGGGATATCCATCGAATACCCATGTCCGAGAATTGAAAGAACCAGCCGAGCATTGTGTAGGCTATATATTTAGACGCTGCTTTGAGAACCTGTCAGAGTAATTGTAGCACGCGCCGGCTTGGCGAACCATGGCAAAATTGTAATGACGAGCTAAGTTCTATAAGTCGAGGGCTCCGGGGAAGCTGGTTTCTTATGAGAAACTACCAGTAATATGCTTCTCGAAGGAGCCCGCCGAGCATTGTGTTGGGTATTCTCTCGTGAACGACTTGGCGATCTGCCTGTGCTCAGCATCATCTACGGCATGTATGAGAGGGATCTGAGCCGCCTCTCCGCATTTGCTTGTATTCTCAAAGCCCTAATTTGATTTTGAGCAAGCGTGGATCTGATGGATTGACTCCGGCAATTAGGTGCGCAATGTGTTATAGGTAAGCTGGCAGATCATACGCACCATTAAGCTATTAATAGGCGACCGTGAGCTGCTACGAACCCGCTTGCAACACCGAGACTCACGGACTCTCCTATCAACAACCGCCTTTAGCATAGATCTAAACTTGTCATTTCGAGGTATCCGTTGTTTCACCGATCAAGACATGTTTCCTTATCGTAACAATTGGCTCCCCCACACTTACTCCGCATATTCGTTCGGGCATTATCTCATACTCTCCGTGAGAAGTCGCACTCCTGTTAGAATTTAGTTATCAGAAGGGTCCAAGAATAAGCCGCCGCTTTTTGGGTGACCTGTAACCTTCTCCGCGTATGCTGTCTATCGCCCACTACGACGTGCCCTGACGTGATTGCAGTGGATATGAAACACCTATAAGGGAAACCCGCTAAAACTGGGTTTAGAACGTATGTATCGTGGCCCAGAGAAACTTGCAGAACTATTCCAGTTGTTGTTATTAACTCTACCGCCGTCGGAGTTATGAGCCTAGGAACACCAGCGGCGCGAGGTCGAGGCCTGGATCTAACGCCGAATGTATCTTAGCACGAACCCCTCTCTTTTTTCGAAGCTGAGAACATAGTTTATGTCCCTATAGTAGTGCACTCATCTCAAGAGGGAGACAAAATAGACAGGTAGTGCATTAGTTCTCCTGGTAACGCTCACTGGTCTACCTAAGAGTTTTACGCATTTTGCATGATTAGACTTTTACCAAATTGACTGATATACGCCACGTCTCTTGACTAAAAGAATCGCTGATAGTTTGAAATGGTGTTGGATTTACGTGTGTCAGTTACCCCGGTCTGGGGTCCTGGTATATGCTGCCATGGGGCCTCACGCTCTAAGAAATGCCGGGTGATCCTGCCCTTAACCACTGATTTGTTGATTAGGCAGGTTTGGCTCTAATCTCTTCCAATTATGCTTTACAATTTGCAGGATTGCCGGACGCGAAGCTCACCTCGGCCTCAAGTTTGAAGCATCCGTCGGTCCGGTTACCATGCTGCATGACGTCCTGCGCCTACCAGGCTACGCGTGTTGATCTATAATAGTCATGCACACGAAGCCTACATCTGGGCCTTGGGCGGGGGTAGTGCTGCAAACGCAAGTCGGCCCGTAACAACTGGTAGAGGGTCATCGATAGTACACTCTCGCGGCATCTAACGGTACGCGCCATATGGCGGTTGCGCACATTCGCAGCGCCCGAAGTTATTTATCAGCTACGGTGTATAAAAAGATCTGCTGGGATTGGGTCAGATGGGGACGTAAGTGGAGATCTACAGTGAATTCCATTAGCAGTTCCGAGTACGAGTCGAACGGCCTGAACACTATTTCTTTACGCAGATCTCTCAAAGGGCAGCTAGAACCAAGCGTTTCTCCTGGGCGCAATCCATGTTCAGCCACATAACTTTTTACCAGTGAGGCACGATTTGGAGCAGAGACTGTTCTCGGGTCAGGTAAGCCATACTGCGCCATGCACGCTGTTCAAGGACGTATTCTGTATACTGCGTGAAGGAATAGTATGGGGCGTATGGTTCGACATCAGATGTCTCGCCTGAGGAGGCCTCACACAAACCGAAAGAGCCGGCAGAACACTGTGTCGGCTATTACAATCTTAGAATCGTGGACGCAATTGCAGATACTAGCATCCAGCACATAGTCTCCGTGAGAAGGAGCCGGCTGAACACTGTGTAGGCTATTTTCAATCTGCGCACATGCATACAGTTGCCCCGACCTGTGGAGTCGCTAATGTTTGGCACAGTTTCGGGTGTTCGAACGTCAGTGAGATTAGCGCCTATCGGAAACTCACCCTTGTCAAGTACCCTTCTAAGGCTAAAGGAACCGGCTGAACACTGTGTTGGGTATAGGTCCCTCAATCGCACGGAGAGATGATAGGGAATCTGTCCGCAGGAGCGTCTGGGCTCTCACTATTGAGGGATGATGCAGAATCTGCAGTTTACGGCTGGCCTTGTGAGTCGCGTTGATAAGTGTATTAACCCATCTCCGTAGTCTGGGATCTCCGGTCCTTTACCCGCACGCAATATCCTTTGTCCGTTGCGTTCTACAGCAACCTGTGATTCTGTATCGAGAATGCAGCATTACGCTCAACATCCACAGGGCTATCAGCTAGTCGCGGGGTGGGCATATCCTACACAGTGTTCAGCCGGTTCCTTCTACTTTGTTAGCGGTGTAGATCGAAGGCATGGAGAACAAAGGCCGGCATATCCCGCGAGCTACGTCTTCAATTCCATCGGGGGTGGCTTAGGCGATCTGTTCTCGATGCGGCCCCGTCTGCATCCTTTTAACAACTTCTGGAGGATAGCCCGTTGCGGTGAATTATCCACAGCACCAGGAAAGAGTCTAATAGGACCCCCCGCTCTTCGTGTCTAAGGGGGGTTCCACCATCCCTAATAAAAGTTATTTAGTCTTGATCGTGAGAACAAAATTTTTTAGTCGCAAAGTACTTTCGACCGCGTACGCAGCGGGATTGCTTCGTGAGAGTGCCCACTAGGGATTGCGATGGTATTTGTGTTCTTCTGTGGGTACCCCCCTATAGTCCGAGAGCCTGCAAGTGATTCGATATGGTATGCAGGTCACGGTACATACAGGCAAGCTGAAACTCGGCCTAGTCGACTCATTTCATAGACCGCCGTAGGTCTTGGTCAAGAGGTCGGAACTGGCACAACAGGGCTGGTGACGATCAGATACGGACTAAAAGAAGTCTTAGATGCGCAGTGGGATGATGTTTCCAGTTTTGTGCTGTTAACGGTAGGGTTGTTACCCCAGTAACTGCCAAACCGGCACTGCGTACAACTCCACCCCCAGGATTACATGCTGTACCTTCACTCAGCTTGCTGCGCGGACGCTCTTTGCTGTCTGTTTTCAATAGGTCCGGACGAGTGGACTCTCCTGAAATGCTATGAAATGTAGATTGTGCCAACAAATTGTACATTACCAAAGTAGGAGAAATATCAGGTGTGGGCTAAACCGTAAGATCGCAGGCAGCCGACCGCGGACCACCACTTGATTGCGTGCCGCTGTTACGTCCGAGCCTTTCCACCTATAATCCCGACCCATGCAGGCAGATGTAAGTCAGATAGAATAGTGATGTGGTTCTCTTCTGGTAAAGTTACTCTGCGCATGATGTACCCTGCCTGGACCTAGGTGCGGTAGTTCGAAGTACATTCACCATCAGGTTTTACATCATAGGCTCACAGAATGCCGCGCTCGGGAAGGTCATACTCCCTATGCATATAACCCAACTCGCCGCCAGCAAAAGGCCTCGCGGGTGAATTAAAGTGTCAGTTTTAAAGGAGCCCGCGGAACACTGCGTTGGTTATTTGTGTCTGATTCACGGTCATTCCTGTATATCGGAAATTCTTTGAATATAAAGAGCCTGCGGAACACTGCGTGGGATATCGTTTAACGGATCATAGTTGTCCGCGATAAACTCGCCCCACCGCGTCCCCAATTGTGGATAACACTTCGAAAATATCAATGTACGCCAAAGATTTTAACGCCCAGCATGACAGGACTGTAAGTTCCCCGTTACCCTATCTCCAGCATGTTCCCAGATGGCTCAAGATTGACTTAAGCCAAACTCAAGCGAGATGCACGTGAGGCGGCAAGTATTATTAAGACCAAACTGGGATATAGTGCCTTCATCGAGGTCTGTAACCGATAGGGTGTATGGTCCCATGCAAGTGGAATATTTCTATATAACACTCCGAGGTCATGCGTGTTTTACGGGGCTACTGAGCAAGAATGGAATGCATGTTGCGATCAGCTTCAATCGCGAGGTTCTACCCCACGGTTGCGACGTTTTTTCCGAAGCTCCGTTAACCTCGCTAAAGAGCCAGCAGAACACTGTGTTGGGTATCGCACTTTCGAAAGAGTTGCATTGGACGCAGCAGCCAGCAATTTAGTATACAAGCATGGCGGACGTAGGATTGATGCTATAAAGGTGAGTTGGCATGCCCCCATAGAACGGATTACCGGAGATGGAGCTCACGGGTTTGGTACACCTGCAGGGCGCGGGACCAACCCGTGAGGATGGTGTATCCCACACAATGCTCGGCGGGTTCTTTGCAAGTTCTAGATCATCCTTGACGAATACAGGCGCAGTTCCGATACCTCGTTATGACAAAGCAAAGGCGATGCCCAGGGTATTCTATCGAGGTATTGTACCCGTCTAGTCGGCTGCACTCCCGAATGTGAGCATTAATTGGTAGTCTCACCTTACCTGCGTTCCCCCCCGCCGACTCATCAGGGCTCTCAGGATCCGTTAACATTTGTTTGATGCTCTCTCCCGTTCCGGAGAACTCACTCGCACTAACCAGACTTAATGGAAGGGACCGGGAAGCCTAAGGTGCCGTCTGAGACCTCTCTCCGGCGGCGGACCAGATCAAATTTTGCCGTATCCCACGCAATGCTCGGCTGGCTCTTTAGTACCCTACACAATGTTCGGCTGGTTCTTTCGCATTATAGACACCGCTGGGTCACGCTCAGGAATGCCGGTGGCGGTAGGCTTAATACTTAGTCTTCACCTGACGCTAGTGGGGGCTCCATAGGACACTAGCCTGGTGACTGCACAAAGGAGCCGGCGGAACATTGTGTTGGGTACGTCTCCCACAATTTATGTAGGTCCACTGATTTGGAATTGCTGGAGCTGAGTTAATAAGC'
pep = 'KEPAEHCVGY'
# rna = fIn.readline().strip()



codonDict = getRNACodonTable()

def peptide(rna):
    peptides = ''
    codon = ''
    for i, c in enumerate(rna):
        codon += c
        if ((i+1) % 3 == 0):
            if codon in codonDict:
                if codonDict[codon] != STOP_ANTICODON:
                    peptides += codonDict[codon]
            else:
                print('Unknown codon:' + codon)
            codon = ''
    return peptides


for j in range(0, len(dna)-5):
    temp = dna[j: j+len(pep)*3]

    if peptide(DNAtoRNA(temp)) == pep or peptide(DNAtoRNA(comp(temp))) == pep:
        print(temp)

# fIn.close()
# fOut.close()